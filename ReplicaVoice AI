replicavoice-ai/
│
├─ backend/
│   ├─ server.js           # Express main server
│   ├─ db.js               # DB connection (mock or SQLite/Postgres)
│   ├─ storage.js          # Storage wrapper
│   ├─ routes/
│   │   ├─ auth.js         # Signup/Login/Password recovery + OAuth
│   │   ├─ subscription.js # Billing & API keys
│   │   ├─ voice.js        # Voice cloning endpoints
│   │   ├─ agent.js        # Agents CRUD endpoints
│   │   └─ chat.js         # Chat system endpoints
│   └─ utils/
│       └─ authMiddleware.js # JWT auth, pro check
│
├─ frontend/
│   ├─ package.json
│   ├─ tailwind.config.js
│   ├─ src/
│   │   ├─ pages/
│   │   │   ├─ LoginPage.tsx
│   │   │   ├─ SignupPage.tsx
│   │   │   ├─ Dashboard.tsx
│   │   │   ├─ BillingPage.tsx
│   │   │   ├─ VoiceClonePage.tsx
│   │   │   ├─ AgentPage.tsx
│   │   │   └─ ChatPage.tsx
│   │   ├─ components/
│   │   │   └─ UsageTracker.tsx
│   │   └─ styles/globals.css
│
└─ vercel.json             # Vercel project config

import express from "express";
import cors from "cors";

import authRouter from "./routes/auth.js";
import subscriptionRouter from "./routes/subscription.js";
import voiceRouter from "./routes/voice.js";
import agentRouter from "./routes/agent.js";
import chatRouter from "./routes/chat.js";

const app = express();
app.use(cors());
app.use(express.json());

// Routes
app.use("/api/auth", authRouter);
app.use("/api/subscription", subscriptionRouter);
app.use("/api/voice", voiceRouter);
app.use("/api/agent", agentRouter);
app.use("/api/chat", chatRouter);

app.get("/", (req, res) => res.send("ReplicaVoice AI backend running"));

const PORT = process.env.PORT || 5000;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));
export const users = [];
export const voices = [];
export const agents = [];
export const chats = [];

export const storage = {
  getUser: id => users.find(u => u.id === id),
  upsertUser: user => {
    const index = users.findIndex(u => u.id === user.id);
    if (index >= 0) users[index] = user;
    else users.push(user);
    return user;
  },
};import express from "express";
import { users, storage } from "../storage.js";
import jwt from "jsonwebtoken";
import bcrypt from "bcrypt";

const router = express.Router();
const SECRET = process.env.JWT_SECRET || "supersecret";

// Signup
router.post("/signup", async (req, res) => {
  const { email, password } = req.body;
  if (users.find(u => u.email === email)) return res.status(400).json({ error: "User exists" });
  const hash = await bcrypt.hash(password, 10);
  const user = { id: Date.now().toString(), email, password: hash, subscriptionTier: "free", apiKey: null };
  storage.upsertUser(user);
  const token = jwt.sign({ id: user.id }, SECRET);
  res.json({ token, user });
});

// Login
router.post("/login", async (req, res) => {
  const { email, password } = req.body;
  const user = users.find(u => u.email === email);
  if (!user) return res.status(400).json({ error: "Invalid credentials" });
  const match = await bcrypt.compare(password, user.password);
  if (!match) return res.status(400).json({ error: "Invalid credentials" });
  const token = jwt.sign({ id: user.id }, SECRET);
  res.json({ token, user });
});

// Password recovery
router.post("/recover", (req, res) => {
  const { email } = req.body;
  const user = users.find(u => u.email === email);
  if (!user) return res.status(400).json({ error: "User not found" });
  res.json({ message: `Password reset link sent to ${email} (mock)` });
});

export default router;import express from "express";
import { users, storage } from "../storage.js";
import { randomUUID } from "crypto";

const router = express.Router();

// Mock subscription
router.post("/subscribe", (req, res) => {
  const { userId, method } = req.body;
  const user = storage.getUser(userId);
  if (!user) return res.status(404).json({ error: "User not found" });
  user.subscriptionTier = "premium";
  user.apiKey = randomUUID();
  storage.upsertUser(user);
  res.json({ success: true, subscriptionTier: "premium", apiKey: user.apiKey, provider: method });
});

export default router;
import express from "express";
import { voices } from "../storage.js";

const router = express.Router();

router.get("/", (req, res) => res.json(voices));

router.post("/synthesize", (req, res) => {
  const { text, voice } = req.body;
  res.json({ audioUrl: `https://fakeaudio.com/${voice}_${Date.now()}.mp3` });
});

export default router;import express from "express";
import { agents } from "../storage.js";

const router = express.Router();

router.get("/", (req, res) => res.json(agents));
router.post("/", (req, res) => {
  const { name, greeting } = req.body;
  const newAgent = { id: Date.now().toString(), name, greeting };
  agents.push(newAgent);
  res.json(newAgent);
});

export default router;